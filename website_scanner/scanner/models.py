from django.db import models
from django.urls import reverse, reverse_lazy
from django.contrib.auth.models import PermissionsMixin
from django.utils import timezone
from accounts.models import CustomUser

# Create your models here.
class VulnerabilityPayloads(models.Model):
    VulnerabilityCategory = (
        (1,'SQL Injection (SQLi)'),
        (2,'Cross Site Scripting (XSS)'),
        (3,'Remote Code Execution (RCE)'),
        (4,'File Inclusion (FI)'),
        (5,'Sensitive Data Exposure (SDE)'),
        (6,'Insecure Direct Object  References (IDOR)'),
        (7, 'Security misconfigurations (SM)'),
    )

    VulnerabilityDescChoice = (
        ('SQL Injection (SQLi)','SQL Injection (SQLi)'),
        ('Cross Site Scripting (XSS)','Cross Site Scripting (XSS)'),
        ('Remote Code Execution (RCE)','Remote Code Execution (RCE)'),
        ('File Inclusion (FI)','File Inclusion (FI)'),
        ('Sensitive Data Exposure (SDE)','Sensitive Data Exposure (SDE)'),
        ('Insecure Direct Object  References (IDOR)','Insecure Direct Object  References (IDOR)'),
        ('Security misconfigurations (SM)', 'Security misconfigurations (SM)'),
    )
    
    vulnerability_id = models.IntegerField(choices=VulnerabilityCategory, blank=True)
    # vulnerability_desc = models.CharField(max_length=200, blank=True, choices=VulnerabilityDescChoice)
    vuln_payload = models.CharField(max_length=2000, blank=True)
    payload_desc = models.TextField()

    class Meta:
        verbose_name = "VulnerabilityPayloads"
        verbose_name_plural = "VulnerabilityPayloadss"

    def __str__(self):
        return str(self.vulnerability_id) + " -> " + self.vuln_payload

    # def get_absolute_url(self):
    #     return reverse("VulnerabilityPayloads_detail", kwargs={"pk": self.pk})

class UserScanMap(models.Model):
    userid = models.ForeignKey('accounts.CustomUser', on_delete=models.CASCADE)
    mainURL = models.URLField()
    created_date = models.DateTimeField(default=timezone.now)

    class Meta:
        verbose_name = "UserScanMap"
        verbose_name_plural = "UserScanMaps"

    def __str__(self):
        return str(self.userid) + " -> " + self.mainURL

    # def get_absolute_url(self):
    #     return reverse("UserScanMap_detail", kwargs={"pk": self.pk})


class ScanDetail(models.Model):
    scan_id = models.ForeignKey("UserScanMap", on_delete=models.CASCADE)
    url = models.URLField()
    status = models.BooleanField()
    vuln_cats = models.CharField(max_length=200, blank=True, null=True)
    scan_time = models.DateTimeField(default=timezone.now)
    solution_response = models.TextField(blank=True, null=True)

    class Meta:
        verbose_name ="ScanDetail"
        verbose_name_plural ="ScanDetails"

    def __str__(self):
        return str(self.scan_id) + " -> " + self.url

    # def get_absolute_url(self):
    #     return reverse("ScanDetail_detail", kwargs={"pk": self.pk})

class ScannedURLDetail(models.Model):
    VulnerabilityCategory = (
        (1,'SQL Injection (SQLi)'),
        (2,'Cross Site Scripting (XSS)'),
        (3,'Remote Code Execution (RCE)'),
        (4,'File Inclusion (FI)'),
        (5,'Sensitive Data Exposure (SDE)'),
        (6,'Insecure Direct Object  References (IDOR)'),
        (7, 'Security misconfigurations (SM)'),
    )

    url_id = models.ForeignKey("ScanDetail", on_delete=models.CASCADE)
    vuln_cat_id = models.IntegerField(choices=VulnerabilityCategory, blank=True)
    payload = models.CharField(max_length=2000)
    code_snippet = models.TextField()
    bug = models.TextField()

    class Meta:
        verbose_name ="ScannedURLDetail"
        verbose_name_plural ="ScannedURLDetails"

    def __str__(self):
        return str(self.vuln_cat_id) + " -> "+ self.payload

    # def get_absolute_url(self):
    #     return reverse("ScannedURLDetail_detail", kwargs={"pk": self.pk})
