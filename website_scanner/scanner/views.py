from django.shortcuts import redirect, render
from django.shortcuts import render
from .forms import WebsiteLinkForm
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.decorators import login_required
from django.views.generic import (TemplateView, ListView, CreateView, UpdateView, DeleteView, DetailView)
from django.utils import timezone
from django.urls import reverse_lazy
from .scripts.main_script import website_scanner
from datetime import timedelta
import time
from django.db.models import Q

#pdf generation
from django.http import FileResponse
from reportlab.pdfgen import canvas
from django.template.loader import get_template
from io import BytesIO
from django.http import HttpResponse
from scanner.models import UserScanMap, ScanDetail, ScannedURLDetail
from accounts.models import CustomUser

@login_required
def website_link_view(request):
    initial_data = {
        'type_of_scan':1
    }
    output_rce = ''
    output_xss = ''
    output_sqli = ''
    unckecked_urls = ''
    scanned_ports = ''
    pdf = ''
    form = WebsiteLinkForm(initial=initial_data)

    if request.method == 'POST':
        form = WebsiteLinkForm(request.POST)
        if form.is_valid():
            website_link = form.cleaned_data['website_link']
            type_of_scan = form.cleaned_data['type_of_scan']
            print(type_of_scan, "type of scan")
            user_id = request.user.id
            custom_user = CustomUser.objects.get(id=user_id)
            print()
            user_scan_map = UserScanMap(userid = custom_user, mainURL = website_link)
            user_scan_map.save()

            # scan start
            start_time = time.time()
            total_requests_count = website_scanner(website_link, user_scan_map.id, type_of_scan)
            # scan end
            end_time = time.time()
            user_scan_map.total_scan_duration = timedelta(end_time - start_time)
            user_scan_map.total_requests += total_requests_count
            user_scan_map.save()

            # redirecting to scandetail_list.html
            return redirect('scanner:scandetail_list', scan_id = user_scan_map.id)
        
    return render(request, 'scanner/scanner_page.html', {'form': form})

class UserScanMapListView(ListView, LoginRequiredMixin):
    model = UserScanMap
    template_name = "scanner/myscan_detail.html"
    login_url = 'login/'
    redirect_field_name = 'scanner/myscan_detail.html'

class UserScanMapDeleteView(DeleteView):
    model = UserScanMap
    success_url = reverse_lazy("myscan_detail")


class ScanDetailListView(ListView, LoginRequiredMixin):
    model = ScanDetail
    template_name = "scandetail_list.html"
    login_url = 'login/'
    redirect_field_name = 'scanner/scanner_page.html'

    def get_queryset(self):
        scan_id = self.kwargs.get('scan_id')
        user_scan_map = UserScanMap.objects.get(id = scan_id)
        return ScanDetail.objects.filter(scan_id = user_scan_map)
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # to fetch total queries
        scan_id = self.kwargs.get('scan_id')
        user_scan_map = UserScanMap.objects.get(id = scan_id)
        total_queries = user_scan_map.total_requests

        # to fetch total vulnerabilities
        total_vulnerabilities = 0
        user_url_id_list = ScanDetail.objects.filter(scan_id = user_scan_map)

        for item in user_url_id_list:
            total_vulnerabilities += ScannedURLDetail.objects.filter(url_id=item).count()

        # to pass values for pie chart
        pie_labels = ['Total Queries', 'Total Vulnerabilities']
        pie_data = [total_queries, total_vulnerabilities]

        # Add the scanned_urldetails to the context
        context['total_queries'] = total_queries
        context['total_vulnerabilities'] = total_vulnerabilities
        context['pie_labels'] = pie_labels
        context['pie_data'] = pie_data
        return context

class ScanDetailDetailView(DetailView, LoginRequiredMixin):
    model = ScanDetail
    template_name = "scanner/scandetail_detail.html"
    login_url = 'login/'
    redirect_field_name = 'scanner/scanner_page.html'

    def get_context_data(self, **kwargs):
        vuln_type = []
        context = super().get_context_data(**kwargs)
        scan_url_id = self.object.pk
        print(scan_url_id)
        scanned_urldetails = ScannedURLDetail.objects.filter(url_id=scan_url_id)

        for item in scanned_urldetails:
            if item.vuln_cat_id not in vuln_type:
                vuln_type.append(item.vuln_cat_id)

        vuln_type.sort()

        # Add the scanned_urldetails to the context
        context['scanned_urldetails'] = scanned_urldetails
        context['vuln_type'] = vuln_type
        return context

