from django.shortcuts import redirect, render
from django.shortcuts import render
from .forms import WebsiteLinkForm
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.decorators import login_required
from django.views.generic import (TemplateView, ListView, CreateView, UpdateView, DeleteView, DetailView)
from django.utils import timezone
from django.urls import reverse_lazy
from .scripts.main_script import website_scanner

#pdf generation
from django.http import FileResponse
from reportlab.pdfgen import canvas
from django.template.loader import get_template
from io import BytesIO
from django.http import HttpResponse
from scanner.models import UserScanMap, ScanDetail, ScannedURLDetail
from accounts.models import CustomUser

@login_required
def website_link_view(request):
    initial_data = {
        'type_of_scan':1
    }
    output_rce = ''
    output_xss = ''
    output_sqli = ''
    unckecked_urls = ''
    scanned_ports = ''
    pdf = ''
    form = WebsiteLinkForm(initial=initial_data)

    if request.method == 'POST':
        form = WebsiteLinkForm(request.POST)
        if form.is_valid():
            website_link = form.cleaned_data['website_link']
            user_id = request.user.id
            custom_user = CustomUser.objects.get(id=user_id)
            print()
            user_scan_map = UserScanMap(userid = custom_user, mainURL = website_link)
            user_scan_map.save()
            website_scanner(website_link, user_scan_map.id)

            # redirecting to scandetail_list.html
            return redirect('scanner:scandetail_list', scan_id = user_scan_map.id)
        
    return render(request, 'scanner/scanner_page.html', {'form': form})

class ScanDetailListView(ListView, LoginRequiredMixin):
    model = ScanDetail
    template_name = "scandetail_list.html"
    login_url = 'login/'
    redirect_field_name = 'scanner/scanner_page.html'

    def get_queryset(self):
        scan_id = self.kwargs.get('scan_id')
        return ScanDetail.objects.filter(scan_id = scan_id)

class ScanDetailDetailView(DetailView, LoginRequiredMixin):
    model = ScanDetail
    template_name = "scanner/scandetail_detail.html"
    login_url = 'login/'
    redirect_field_name = 'scanner/scanner_page.html'

# function to return the payload and error information
@login_required
def get_scaned_urldetails(scan_url_id):
    scaned_urldetails = ScannedURLDetail.objects.filter(url_id=scan_url_id)
    return scaned_urldetails
