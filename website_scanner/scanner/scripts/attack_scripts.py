from .main_attack_script import main_function
from .header_script import headers_reader, UserAgent, HTTP_HEADER
import re

# importing values from model
from scanner.models import VulnerabilityPayloads, ProcessDetail, UserScanMap, ScanDetail

# fetch payload with respect to vulnerability_type
def fetch_payload(vuln_cat_id):
    payloads = []
    all_payloads = list(VulnerabilityPayloads.objects.filter(vulnerability_id=vuln_cat_id))
    if all_payloads is None:
        print("No payloads found")
    else:
        for pld in all_payloads:
            payloads.append(pld.vuln_payload)   

    return payloads

# code for Remote Code Execution
def rce_func(url, scan_detail_id, scan_id):
    user_scan_map = UserScanMap.objects.get(id = scan_id)
    scan_detail = ScanDetail.objects.get(id = scan_detail_id)
    message = "[*] Checking for remote code execution"
    print(message)
    process_detail = ProcessDetail(scan_id = user_scan_map, scan_url_id = scan_detail, process_desc = message)
    process_detail.save()
    headers_reader(url)
    payloads = fetch_payload(3)
    check = re.compile("51107ed95250b4099a0f481221d56497|Linux|eval\(\)|SERVER_ADDR|Volume.+Serial|\[boot", re.I)
    solution, total_request_count = main_function(url, payloads, check, 3, scan_detail_id, scan_id)
    return solution, total_request_count

# code for SQL injection
def error_based_sqli_func(url, scan_detail_id, scan_id):
    user_scan_map = UserScanMap.objects.get(id = scan_id)
    scan_detail = ScanDetail.objects.get(id = scan_detail_id)
    message = "[*] Checking for SQL Injection"
    print(message)
    process_detail = ProcessDetail(scan_id = user_scan_map, scan_url_id = scan_detail, process_desc = message)
    process_detail.save()
    payloads = fetch_payload(1)
    check = re.compile("Incorrect syntax|Syntax error|Unclosed.+mark|unterminated.+qoute|SQL.+Server|Microsoft.+Database|Fatal.+error", re.I)
    solution, total_request_count =  main_function(url, payloads, check, 1, scan_detail_id, scan_id)
    return solution, total_request_count

#Code for Cross Site Scripting
def xss_func(url, scan_detail_id, scan_id):
    user_scan_map = UserScanMap.objects.get(id = scan_id)
    scan_detail = ScanDetail.objects.get(id = scan_detail_id)
    message = "[*] Checking for Cross site scripting"
    print(message)
    process_detail = ProcessDetail(scan_id = user_scan_map, scan_url_id = scan_detail, process_desc = message)
    process_detail.save()
    payloads = fetch_payload(2)
    check = re.compile('zigoo0<svg|x>x', re.I)
    solution, total_request_count =  main_function(url, payloads, check, 2, scan_detail_id, scan_id)
    return solution, total_request_count