import openai
from .attack_scripts import xss_func, error_based_sqli_func, rce_func

# openai request
def create_and_return_request_object(content):
    ans = openai.ChatCompletion.create(
    messages = [
        {"role":"user", "content":content}
        ],
    model = "gpt-3.5-turbo",
    max_tokens=500,
    stream = True,
    temperature = 0,
    frequency_penalty = 1
    )
    return ans

# Generate Prompt message
def generate_prompt_message(url, output_xss, output_rce, output_sqli):
    print("[!] Generating request message!")
    prompt=f"""
        The given website url has the following vulnerabilities. 
        Give me appropriate solution to resolve the following vulnerabilities.
        include code and algorithmic responses
        make answer simple.
        
        Url: {url}
        
    """
    
    if output_xss != 1:
        prompt += f"""
        
        Type: XSS vulnerabilities
        different payloads for which the url is vulnerable: {output_xss["payload"]}
        vulnerable code snippets: {output_xss["code_snippet"]}
        bugs: {output_xss["bug"]}
        total_bugs = {output_xss["total_bugs"]}
        
        """
    
    if output_rce != 1:
        prompt += f"""
        Type: XSS vulnerabilities
        different payloads for which the url is vulnerable: {output_rce["payload"]}
        vulnerable code snippets: {output_rce["code_snippet"]}
        bugs: {output_rce["bug"]}
        total_bugs = {output_rce["total_bugs"]}

        """
    
    if output_sqli != 1:
        prompt += f"""
        Type: XSS vulnerabilities
        different payloads for which the url is vulnerable: {output_sqli["payload"]}
        vulnerable code snippets: {output_sqli["code_snippet"]}
        bugs: {output_sqli["bug"]}
        total_bugs = {output_sqli["total_bugs"]}
        
        first payload corresponds to first code_snippet and first bug respectively
        """
    print("[!] Request message generation complete")
    return prompt


# generate response
def generate_response(url):
    solution_response = ''
    output_xss = xss_func(url)
    output_rce = rce_func(url)
    output_sqli = error_based_sqli_func(url)
    prompt = generate_prompt_message(url, output_xss, output_rce, output_sqli)
    
    solution_response = create_and_return_request_object(prompt)
    return solution_response