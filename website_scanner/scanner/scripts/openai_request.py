import openai
from .attack_scripts import xss_func, error_based_sqli_func, rce_func
from scanner.models import ScanDetail, UserScanMap
import time

# importing environment variables
from dotenv import dotenv_values
config = dotenv_values(".env")
openai.api_key = config["api_key_openai"]

# openai request
def create_and_return_request_object(content):
    ans = openai.ChatCompletion.create(
    messages = [
        {"role":"user", "content":content}
        ],
    model = "gpt-3.5-turbo",
    max_tokens=500,
    # stream = True,
    temperature = 0,
    frequency_penalty = 1
    )
    return ans

# Generate Prompt message
def generate_prompt_message(url, output_xss, output_rce, output_sqli, scan_id):
    
    print("[!] Generating request message!")
    prompt=f"""
        The given website url has the following vulnerabilities. 
        Give me appropriate solution to resolve the following vulnerabilities.
        include code and algorithmic responses
        make answer simple.
        
        Url: {url}
        
    """
    
    if output_xss != 1:
        prompt += f"""
        
        Type: XSS vulnerabilities
        different payloads for which the url is vulnerable: {output_xss["payload"]}
        vulnerable code snippets: {output_xss["code_snippet"]}
        bugs: {output_xss["bug"]}
        total_bugs = {output_xss["total_bugs"]}
        
        """
    
    if output_rce != 1:
        prompt += f"""
        Type: XSS vulnerabilities
        different payloads for which the url is vulnerable: {output_rce["payload"]}
        vulnerable code snippets: {output_rce["code_snippet"]}
        bugs: {output_rce["bug"]}
        total_bugs = {output_rce["total_bugs"]}

        """
    
    if output_sqli != 1:
        prompt += f"""
        Type: XSS vulnerabilities
        different payloads for which the url is vulnerable: {output_sqli["payload"]}
        vulnerable code snippets: {output_sqli["code_snippet"]}
        bugs: {output_sqli["bug"]}
        total_bugs = {output_sqli["total_bugs"]}
        
        first payload corresponds to first code_snippet and first bug respectively
        """
    print("[!] Request message generation complete")

    return prompt


# generate response
def generate_response(url, scan_id):
    start_time = time.time() # scan start of siingle URL
    attack_cats = []
    scan_type = "Full Scan"
    user_scan_map = UserScanMap.objects.get(id = scan_id)
    scan_detail = ScanDetail(scan_id=user_scan_map, url=url, status=1, scan_type = scan_type)
    scan_detail.save()

    solution_response = 'The URL is Secure'
    output_xss = xss_func(url, scan_detail.id)
    output_rce = rce_func(url, scan_detail.id)
    output_sqli = error_based_sqli_func(url, scan_detail.id)

    if output_sqli != 1:
        attack_cats.append(1)
    if output_xss != 1:
        attack_cats.append(2)
    if output_rce != 1:
        attack_cats.append(3)

    if len(attack_cats) != 0:
        scan_detail = ScanDetail.objects.get(id = scan_detail.id)
        scan_detail.status = 0
        scan_detail.vuln_cats = attack_cats
        scan_detail.save()
        prompt = generate_prompt_message(url, output_xss, output_rce, output_sqli, scan_id)
        solution_response = create_and_return_request_object(prompt)
    
    scan_detail.solution_response = solution_response.choices[0].message["content"]
    end_time = time.time()
    scan_detail.scan_duration = end_time - start_time
    scan_detail.save()
    return solution_response